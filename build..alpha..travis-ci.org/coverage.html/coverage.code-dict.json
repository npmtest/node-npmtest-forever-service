{"/home/travis/build/npmtest/node-npmtest-forever-service/test.js":"/* istanbul instrument in package npmtest_forever_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-service/lib.npmtest_forever_service.js":"/* istanbul instrument in package npmtest_forever_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_forever_service = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_forever_service = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-service/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-forever-service && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_forever_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_forever_service\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_forever_service.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_forever_service.rollup.js'] =\n            local.assetsDict['/assets.npmtest_forever_service.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_forever_service.__dirname + '/lib.npmtest_forever_service.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-service/node_modules/forever-service/lib/api.js":"exports.installer = require('./installer');\nexports.platforms = require('./platforms');\nexports.scriptBuilder = require('./scriptBuilder');\n","/home/travis/build/npmtest/node-npmtest-forever-service/node_modules/forever-service/lib/installer.js":"var fs = require('fs'),\n\tpath = require('path'),\n\tscriptBuilder = require('./scriptBuilder');\n\nexports.validateScriptName = function(scriptname){\n\tif(scriptname && scriptname[0] === path.sep)\n\t\treturn fs.existsSync(scriptname);\n\telse\n\t\treturn fs.existsSync( process.cwd()+'/'+scriptname );\n}\n\n\nexports.install = function(ctx, callback){\n\tscriptBuilder.gen(ctx, function(err, scripts){\n\t\tif(err) return callback(err);\n\n\t\tctx.installer.install(ctx, scripts, callback);\n\t});\n}\n\nexports.delete = function(ctx, callback){\n\tscriptBuilder.gen(ctx, function(err, scripts){\n\t\tif(err) return callback(err);\n\n\t\tctx.installer.delete(ctx, scripts, callback);\n\t});\n}\n\n\nexports.splitEnvVariables=function(envVars){\n\t//Split at space, but ignore space inside quotes..\n\treturn envVars.match(/(?:[^\\s\"']+|[\"'][^\"']*[\"'])+/g);\n}\n","/home/travis/build/npmtest/node-npmtest-forever-service/node_modules/forever-service/lib/scriptBuilder.js":"\"use strict\";\nvar swig = require('swig');\nvar path = require('path');\nvar async = require('async');\nvar fs = require('fs');\n\nexports.gen=function(ctx, callback){\n\n\tif(!ctx) throw \"context missing\";\n\tif(!ctx.platform) throw \"platform missing\";\n\tif(!callback && typeof(callback) !== \"function\") throw \"callback missing\";\n\n\tctx.cwd = process.cwd();\n\tctx.cli = process.argv.join(' ');\n\tvar templateDir =  path.normalize( __dirname + '/..' ) +'/templates/'+ctx.platform;\n\tvar filledTemplates = {};\n\n\tfs.exists(templateDir, function(exists){\n\t\tif(!exists) throw \"platform \"+ctx.platform+\" not found\";\n\t\tfs.readdir(templateDir, function(err, files){\n\t\t\tasync.each(files, \n\t\t\t\tfunction(file, callback){\n\t\t\t\t\tif(file.match(/.template$/g)){\n\t\t\t\t\t\tgenFile(ctx, templateDir, file, function(err, output){\n\t\t\t\t\t\t\tif(err) throw err;\n\t\t\t\t\t\t\tfilledTemplates[output.file.replace('.template','')] = output.out;\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else callback();\n\t\t\t\t},\n\t\t\t\tfunction(err){\n\t\t\t\t\tcallback(err, filledTemplates);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n}\n\nfunction genFile(ctx, folder, file, callback){\n\tswig.compileFile(folder + \"/\" + file, {autoescape: false}, function(err, output){\n\t\tif(err) \n\t\t\tcallback(err);\n\t\telse\n\t\t\tcallback(null, {folder: folder, file: file, out: output(ctx)});\n\t});\n}\n\n","/home/travis/build/npmtest/node-npmtest-forever-service/node_modules/forever-service/lib/platforms.js":"var path = require('path')\nvar walker = require('walker');\n\n\nfunction platform(){\n\tthis.p = null;\n}\n\nplatform.prototype.get=function(callback){\n\twalker(__dirname+'/../templates').on('dir', function(entry, stat){\n\t\tif(this.p) return; //If already platform is found dont go further\n\n\t\tif(entry.match(/templates$/g)) return; //Ignore the templates directory itself\n\n\t\tvar folder = path.basename(entry);\n\t\tvar platformInstaller = require(entry+'/installer.js');\n\t\tvar ret = platformInstaller.initialize();\n\n\t\tif(ret){\n\t\t\tthis.p = Object.create(ret);\n\t\t\tthis.p.folder = folder;\n\t\t\tthis.p.installer = platformInstaller;\n\t\t\t//It is better to have predictable forever root according to sudo user\n\t\t\tthis.p.foreverRoot = process.env.FOREVER_ROOT || path.join(process.env.HOME || process.env.USERPROFILE || '/root', '.forever');\n\t\t}\n\n\t}).on('end', function(){\n\t\tcallback(null, this.p);\n\t})\n}\n\n\nmodule.exports = new platform();\n","/home/travis/build/npmtest/node-npmtest-forever-service/node_modules/forever-service/templates/sysvinit/installer.js":"var async = require('async'),\n\tshell = require('shelljs'),\n\tfs = require('fs');\n\nexports.initialize=function(){\n\n\tif(fs.existsSync('/etc/system-release')){\n\t\tvar contents = fs.readFileSync('/etc/system-release','utf8');\n\t\tif( contents && contents.match(/(Amazon Linux)|(Red Hat)|(CentOS)|(Fedora)|(Oracle Linux)/g) ){\n\t\t\treturn {\n\t\t\t\tos: contents,\n\t\t\t\tplatform: 'sysvinit',\n\t\t\t\tscmd: 'chkconfig',\n\t\t\t\tosflavor: 'centos',\n\t\t\t\thelp: 'Command to interact with service, sudo service [service] start|stop|restart|status'\n\t\t\t};\n\t\t}\n\t} else if (fs.existsSync('/etc/os-release')){\n\t\tvar contents = fs.readFileSync('/etc/os-release','utf8');\n\t\tif (/ID=(debian|bunsenlabs|raspbian|osmc|\"elementary OS\")/.test(contents) ||\n\t\t\t(!fs.existsSync('/sbin/upstart') && /ID_LIKE=debian/.test(contents))) { // Matches Ubuntu 15+ with systemd only\n\t\t\treturn {\n\t\t\t\tos: getPrettyName(contents),\n\t\t\t\tplatform: 'sysvinit',\n\t\t\t\tscmd: 'update-rc.d',\n\t\t\t\tusleepSupported: false,\n\t\t\t\tosflavor: 'debian',\n\t\t\t\thelp: 'Command to interact with service, sudo service [service] start|stop|restart|status'\n\t\t\t};\n\t\t}\n\t}\n}\n\n\nexports.install=function(ctx, scripts, callback){\n\t//Install the init.d file..\n\tif(ctx.platform === 'sysvinit'){\n\t\tvar serviceFile = '/etc/init.d/'+ctx.service;\n\t\tvar logrotateFile = '/etc/logrotate.d/'+ctx.service;\n\n\n\t\tasync.series(\n\t\t\t[\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.exists(serviceFile, function(exists){\n\t\t\t\t\t\tif(exists){\n\t\t\t\t\t\t\tcallback(\"Service is already present\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.writeFile(serviceFile, scripts['initd'], callback);\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tshell.exec('chmod +x '+serviceFile, {async: true}, function(code, output){\n\t\t\t\t\t\tcallback(code != 0?'Could not make '+serviceFile+' executable\\n'+output:null); //error if non 0 exit code\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tvar pcmd = 'chkconfig --add '+ctx.service;\n\t\t\t\t\tif(ctx.scmd ==='update-rc.d')\n\t\t\t\t\t\tpcmd = '/usr/sbin/update-rc.d '+ctx.service+' defaults';\n\t\t\t\t\tshell.exec(pcmd, {async: true}, function(code, output){\n\t\t\t\t\t\tcallback(code != 0?'Could not add service '+ctx.service+'\\n'+output:null); //error if non 0 exit code\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tif(ctx.nologrotate) return callback(null);\n\t\t\t\t\tfs.writeFile(logrotateFile, scripts['logrotate'], callback);\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction(err, results){\n\t\t\t\tcallback(err, {\n\t\t\t\t\t\thelp: 'Commands to interact with service '+ctx.service+'\\n'+\n\t\t\t\t\t\t\t  'Start   - \"sudo service '+ctx.service+' start\"\\n'+\n\t\t\t\t\t\t\t  'Stop    - \"sudo service '+ctx.service+' stop\"\\n'+\n\t\t\t\t\t\t\t  'Status  - \"sudo service '+ctx.service+' status\"\\n'+\n\t\t\t\t\t\t\t  'Restart - \"sudo service '+ctx.service+' restart\"'\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nfunction getPrettyName(contents){\n\tif(!contents) return;\n\tvar m = contents.match(/PRETTY_NAME\\s*=\\s*\"(.*)\"/);\n\tif(m && m.length > 1 && m[1]){\n\t\treturn m[1];\n\t}\n}\n\nexports.startService=function(ctx, callback){\n\tshell.exec('sudo service '+ctx.service+' start', {async: true}, function(code, output){\n\t\tcallback(code != 0); //error if non 0 exit code\n\t});\n}\n\n\nfunction stopService(ctx, callback){\n\tshell.exec('sudo service '+ctx.service+' stop', {async: true}, function(code, output){\n\t\t//callback(code != 0); //error if non 0 exit code\n\t\tcallback(); //even if there is error in stopping service we will continue with uninstallation..\n\t});\n}\n\nexports.stopService = stopService;\n\nexports.delete=function(ctx, scripts, callback){\n\tif(ctx.platform === 'sysvinit'){\n\t\tvar serviceFile = '/etc/init.d/'+ctx.service;\n\t\tvar logrotateFile = '/etc/logrotate.d/'+ctx.service;\n\n\t\tasync.series(\n\t\t\t[\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.exists(serviceFile, function(exists){\n\t\t\t\t\t\tif(!exists){\n\t\t\t\t\t\t\tcallback(\"Service not found\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.readFile(serviceFile, 'utf8', function(err,data){\n\t\t\t\t\t\tif(err) return callback(err);\n\n\t\t\t\t\t\tif(data.match(/forever\\-service/g)){\n\t\t\t\t\t\t\tcallback(null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(\"Service not provisioned with forever-service\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tstopService(ctx, callback);\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tif(ctx.scmd ==='update-rc.d') return callback(null); //For update-rc.d remove will be called after unlink\n\t\t\t\t\tshell.exec('chkconfig --del '+ctx.service, {async: true}, function(code, output){\n\t\t\t\t\t\tcallback(code != 0?'Could not delete service '+ctx.service+'\\n'+output:null); //error if non 0 exit code\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.unlink(serviceFile, callback);\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tif(ctx.scmd !=='update-rc.d') return callback(null); //Following step is Only for update-rc.d to remove service\n\t\t\t\t\tshell.exec('/usr/sbin/update-rc.d -f '+ctx.service+' remove', {async: true}, function(code, output){\n\t\t\t\t\t\tcallback(code != 0?'Could not delete service '+ctx.service+'\\n'+output:null); //error if non 0 exit code\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction(callback){\n\t\t\t\t\tfs.exists(logrotateFile, function(exists){\n\t\t\t\t\t\tif(exists){\n\t\t\t\t\t\t\tfs.unlink(logrotateFile, callback);\n\t\t\t\t\t\t} else callback(null);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t],\n\t\t\tfunction(err, results){\n\t\t\t\tcallback(err);\n\t\t\t}\n\t\t);\n\t}\n}\n"}